#!/bin/bash
# For qBittorrent to detect and purge torrents with *many* files.

#exec &> >(tee ~/logfile)
#set -x # Debugged rars not getting removed. Was the quoting in the url in the cmdline. qbittorrent settings.

function log {
  if [ "$2" == 'stderr' ]
  then
    echo -e "$1" >&2
  else
    echo -e "$1"
  fi
  echo -e "$1" >> ${0}.log
}

echo -e "All args: ${@}" >> ${0}.log

function printHelp {
  log
  log "A script to help qBittorrent police the content Radarr and Sonarr fetch without"
  log "checking grabbed torrent files and magnets for archive content or hundreds of files."
  log
  log "This is intended to be called by qBittorrent and can be added at the bottom of Options > Downloads"
  log "In the 'Run external program on torrent added' section"
  log
  log "qBittorrent script Usage:"
  log "\t$0"
  log "\t    -radarr-addr http://radarr.local:80  # Radarr HTTP UI Address"
  log "\t    -radarr-apikey 4301g2j21e4fgj089     # Radarr API Key"
  log "\t    -sonarr-addr http://sonarr.local:80  # Sonarr HTTP UI Address"
  log "\t    -sonarr-apikey 980jgf4e12j2g1034     # Sonarr API Key"
  log "\t    -categories movies,tv                # Only run checks if torrent is in one of these categories"
  log "\t    -filecountthreshold 5                # Reject torrents on Sonarr/Radarr if they contain more than this many files."
  log ""
  log "Special arguments for qBittorrent:"
  log "\t    -torrentName \"%N\"                  # The torrent's name qBittorrent."
  log "\t    -torrentFileCount \"%C\"             # The file count of this torrent from qBittorrent."
  log "\t    -torrentCategory \"%L\"              # The torrent's category."
  exit 1
}

function getTorrentId {
  addr="$1"
  apikey="$2"
  if queueDetails=$(curl --fail -Ss -XGET "${addr}/api/v3/queue/details?apikey=${apikey}" 2>&1)
  then
    result=$(jq ".[] | select (.title | contains(\"${torrentName}\")) | .id" <<< ${queueDetails})
    [ -n "${result}" ] && echo "${result}"
  else
    log "Failed to get queue details from ${addr}" 'stderr'
    log "${queueDetails}" 'stderr'
  fi
}

function handleTorrent {
  # Check for the torrent in Radar and Sonarr for deletion.

  # Check each 30 times in case the torrent hasn't been added to their lists yet
  log "Searching for torrent in either Sonarr or Radar..." 'stderr'
  count=0 timeout=30
  while [ -z "${torrentId}" ] && [ ${count} -lt ${timeout} ]
  do

    # Check Radarr
    if [ -n "${radarr_addr}" ] && [ -n "${radarr_apikey}" ]
    then

      torrentId=$(getTorrentId "${radarr_addr}" "${radarr_apikey}")
      if [[ -n "${torrentId}" ]]
      then
        [ $count -gt 0 ] && log "Got result after ${count} retries..." 'stderr'
        echo "Matched Radarr download ID: ${torrentId}"
        isDry && echo "Dry mode active. Not deleting." || curl -Ss -XDELETE "${radarr_addr}/api/v3/queue/${torrentId}?apikey=${radarr_apikey}&removeFromClient=true&blocklist=true&skipRedownload=false"
        return $?
      fi
    fi

    # Check Sonarr
    if [ -n "${sonarr_addr}" ] && [ -n "${sonarr_apikey}" ]
    then

      torrentId=$(getTorrentId "${sonarr_addr}" "${sonarr_apikey}")
      if [[ -n "${torrentId}" ]]
      then
        [ $count -gt 0 ] && log "Got result after ${count} retries..." 'stderr'
        echo "Matched Sonarr download ID: ${torrentId}"
        isDry && echo "Dry mode active. Not deleting." || curl -Ss -XDELETE "${sonarr_addr}/api/v3/queue/${torrentId}?apikey=${sonarr_apikey}&removeFromClient=true&blocklist=true&skipRedownload=false"
        return $?
      fi
    fi

    sleep 1
    ((count++))
  done

  log "No match found in either Radarr or Sonarr." 'stderr'
  log "Unable to match this torrent to a downloader." 'stderr'
  log "Panicking..." 'stderr'
  exit 1
}

function isDry { [ -n "$dry" ] ; return $? ;}

if [ $# -eq 0 ]
then
  printHelp
fi

while [ $# -gt 0 ]
do
  case "$(tr '[:upper:]' '[:lower:]'<<<$1)" in
    -dry)
      log "Dry mode active. Won't delete a match."
      dry=1
      shift
    ;;
    -radarr-addr)
      radarr_addr="$2"
      shift
    ;;
    -radarr-apikey)
      radarr_apikey="$2"
      shift
    ;;
    -sonarr-addr)
      sonarr_addr="$2"
      shift
    ;;
    -sonarr-apikey)
      sonarr_apikey="$2"
      shift
    ;;
   -categories)
      categories=(${2/,/ })
      shift
    ;;
    -filecountthreshold)
      fileCountThreshold="$2"
      shift
    ;;
    -torrentname)
      torrentName="$2"
      shift
    ;;
    -torrentfilecount)
      torrentFileCount="$2"
      if [[ "${torrentFileCount}" =~ - ]]
      then
        log "Dropping leading minus from torrent file count..."
        torrentFileCount=${torrentFileCount//-/}
      fi

      shift
    ;;
    -torrentcategory)
      torrentCategory="$2"
      shift
    ;;
    *)
      log "Unrecognised option $2"
      printHelp
    ;;
  esac
  shift
done


# Prepare

if [[ "${torrentFileCount}" =~ % ]]
then
  log "It seems vars have not been filled in correctly by qBt. Exiting..."
  exit 1
fi

  # Check torrent name and file-count provided
if [ -z "${torrentName}" ] || [ -z "${torrentFileCount}" ]
then
  log "Need -torrentName & -torrentFilecount to continue "
  exit 1
fi

if ! [[ ${torrentFileCount} =~ ^[0-9]+$ ]]
then
  log "-torrentFileCount needs to be a number!"
  exit 1
fi

if [ -z "${fileCountThreshold}" ]
then
  log "Need to define -filecountthreshold"
  exit 1
fi

if [ -z "${radarr_addr}" ] && [ -z "${sonarr_addr}" ]
then
  log "Need at least a radarr or sonarr address to function."
  exit 1
fi

if [ -z "${radarr_apikey}" ] && [ -z "${sonarr_apikey}" ]
then
  log "Need at least a radarr or sonarr apikey to function."
  exit 1
fi

# Run
log "Processing ${torrentName}..."

if [ -n "$categories" ]
then
  if ! [[ "${categories[@]}" =~ "${torrentCategory}" ]]
  then
    log "No match for $torrentCategory in categories provided: ${categories[@]}."
    log "Skipping torrent."
    exit 0
  fi
else
  eco "No -categories specified, continuing..."
fi


if [ ${torrentFileCount} -ge ${fileCountThreshold} ]
then
  log "Torrent has too many files (${torrentFileCount})"
  handleTorrent
fi
